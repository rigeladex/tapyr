# -*- coding: utf-8 -*-
# Copyright (C) 2017-2018 Christian Tanzer All rights reserved
# tanzer@gg32.com                                      https://www.gg32.com
# #*** <License> ************************************************************#
# This module is part of the package TFL.__test__.
#
# This module is licensed under the terms of the BSD 3-Clause License
# <https://www.gg32.com/license/bsd_3c.html>.
# #*** </License> ***********************************************************#
#
#++
# Name
#    TFL.__test__.Ticker
#
# Purpose
#    Doctest for TFL.Ticker
#
# Revision Dates
#     7-Jun-2017 (CT) Creation
#    ««revision-date»»···
#--

from   _TFL.portable_repr         import portable_repr
from   _TFL.Ticker                import *

def show (* args) :
    print (* tuple (portable_repr (a) for a in args))

b_intervals = ((-32, 42), (0, 40), (0, 100), (1, 5), (1, 12), (1, 365), (1.32, 2.44))
factors     = sorted (tuple (10 ** i for i in range (-4, 5, 2)) + (0.1, 10))
intervals   = sorted ((l*f, h*f) for l, h in b_intervals for f in factors)

__doc__ = r"""
Doctest for TFL.Ticker ::

    >>> bases = \
    ...    ( base_quarter, Base (6), Base (8), base_10, base_month, base_12
    ...    , base_16, Base (16), base_hour, base_day, base_week
    ...    )

    >>> bases = Base (6), base_10, base_month, Base (16)
    >>> fmt = "%-20s --> %2d ^ %+d : %s"
    >>> for b in bases :
    ...   print ("=" * 3, b, "=" * 40)
    ...   for iv in intervals :
    ...     ax = Axis (b, * iv)
    ...     print ((fmt % (portable_repr (iv), ax.scaled.base, ax.scaled.scale, ", ".join ("%g" % d for d in ax.scaled.deltas))).rstrip ())
    ===  6 : (1, 2, 3, 6) ========================================
    (-320000, 420000)    -->  6 ^ +7 : 279936, 419904, 559872
    (-3200, 4200)        -->  6 ^ +4 : 1296, 1944, 2592, 3888
    (-320, 420)          -->  6 ^ +3 : 216, 324, 432, 648
    (-32, 42)            -->  6 ^ +1 : 6, 9, 12, 18, 36
    (-3.2, 4.2)          -->  6 ^ +0 : 1, 2, 3, 6
    (-0.32, 0.42)        -->  6 ^ -1 : 0.166667, 0.333333, 0.5, 1
    (-0.0032, 0.0042)    -->  6 ^ -4 : 0.000771605, 0.00154321, 0.00231481, 0.00462963
    (0, 0.004)           -->  6 ^ -4 : 0.000771605, 0.00154321, 0.00231481, 0.00462963
    (0, 0.01)            -->  6 ^ -4 : 0.000771605, 0.00154321, 0.00231481, 0.00462963
    (0, 0.4)             -->  6 ^ -2 : 0.0277778, 0.0555556, 0.0833333, 0.166667
    (0, 1)               -->  6 ^ -1 : 0.166667, 0.333333, 0.5, 1
    (0, 4)               -->  6 ^ +0 : 1, 2, 3, 6
    (0, 10)              -->  6 ^ +0 : 1, 2, 3, 6
    (0, 40)              -->  6 ^ +1 : 6, 9, 12, 18, 36
    (0, 100)             -->  6 ^ +2 : 36, 54, 72
    (0, 400)             -->  6 ^ +2 : 36, 54, 72, 108, 216
    (0, 1000)            -->  6 ^ +3 : 216, 324, 432, 648
    (0, 4000)            -->  6 ^ +4 : 1296, 1944, 2592, 3888
    (0, 10000)           -->  6 ^ +4 : 1296, 1944, 2592, 3888, 7776
    (0, 400000)          -->  6 ^ +6 : 46656, 69984, 93312, 139968, 279936
    (0, 1000000)         -->  6 ^ +7 : 279936, 419904, 559872, 839808
    (0.0001, 0.0005)     -->  6 ^ -5 : 0.000128601, 0.000257202, 0.000385802, 0.000771605
    (0.0001, 0.0012)     -->  6 ^ -5 : 0.000128601, 0.000257202, 0.000385802, 0.000771605
    (0.0001, 0.0365)     -->  6 ^ -3 : 0.00462963, 0.00925926, 0.0138889, 0.0277778
    (0.000132, 0.000244) -->  6 ^ -6 : 2.14335e-05, 4.28669e-05, 6.43004e-05, 0.000128601
    (0.01, 0.05)         -->  6 ^ -3 : 0.00462963, 0.00925926, 0.0138889, 0.0277778
    (0.01, 0.12)         -->  6 ^ -2 : 0.0277778, 0.0555556, 0.0833333, 0.166667
    (0.01, 3.65)         -->  6 ^ +0 : 1, 2, 3, 6
    (0.0132, 0.0244)     -->  6 ^ -4 : 0.000771605, 0.00154321, 0.00231481, 0.00462963
    (0.1, 0.5)           -->  6 ^ -2 : 0.0277778, 0.0555556, 0.0833333, 0.166667
    (0.1, 1.2)           -->  6 ^ -1 : 0.166667, 0.333333, 0.5, 1
    (0.1, 36.5)          -->  6 ^ +1 : 6, 9, 12, 18, 36
    (0.132, 0.244)       -->  6 ^ -2 : 0.0277778, 0.0555556, 0.0833333, 0.166667
    (1, 5)               -->  6 ^ +0 : 1, 2, 3, 6
    (1, 12)              -->  6 ^ +0 : 1, 2, 3, 6
    (1, 365)             -->  6 ^ +2 : 36, 54, 72, 108, 216
    (1.32, 2.44)         -->  6 ^ -1 : 0.166667, 0.333333, 0.5, 1
    (10, 50)             -->  6 ^ +1 : 6, 9, 12, 18, 36
    (10, 120)            -->  6 ^ +2 : 36, 54, 72, 108
    (10, 3650)           -->  6 ^ +4 : 1296, 1944, 2592
    (13.2, 24.4)         -->  6 ^ +0 : 1, 2, 3, 6
    (100, 500)           -->  6 ^ +2 : 36, 54, 72, 108, 216
    (100, 1200)          -->  6 ^ +3 : 216, 324, 432, 648
    (100, 36500)         -->  6 ^ +5 : 7776, 11664, 15552, 23328
    (132, 244)           -->  6 ^ +2 : 36, 54, 72, 108
    (10000, 50000)       -->  6 ^ +5 : 7776, 11664, 15552, 23328
    (10000, 120000)      -->  6 ^ +5 : 7776, 11664, 15552, 23328, 46656
    (10000, 3650000)     -->  6 ^ +7 : 279936, 419904, 559872, 839808, 1.67962e+06
    (13200, 24400)       -->  6 ^ +4 : 1296, 1944, 2592, 3888, 7776
    === 10 : (1, 2, 5, 10) ========================================
    (-320000, 420000)    --> 10 ^ +5 : 100000, 125000, 200000, 250000, 500000
    (-3200, 4200)        --> 10 ^ +3 : 1000, 1250, 2000, 2500, 5000
    (-320, 420)          --> 10 ^ +2 : 100, 125, 200, 250, 500
    (-32, 42)            --> 10 ^ +1 : 10, 20, 25, 50
    (-3.2, 4.2)          --> 10 ^ +0 : 1, 2, 5, 10
    (-0.32, 0.42)        --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (-0.0032, 0.0042)    --> 10 ^ -3 : 0.001, 0.002, 0.005, 0.01
    (0, 0.004)           --> 10 ^ -3 : 0.001, 0.002, 0.005, 0.01
    (0, 0.01)            --> 10 ^ -3 : 0.001, 0.002, 0.005, 0.01
    (0, 0.4)             --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (0, 1)               --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (0, 4)               --> 10 ^ +0 : 1, 2, 5, 10
    (0, 10)              --> 10 ^ +0 : 1, 2, 5, 10
    (0, 40)              --> 10 ^ +1 : 10, 20, 25
    (0, 100)             --> 10 ^ +1 : 10, 20, 25, 50, 100
    (0, 400)             --> 10 ^ +2 : 100, 125, 200, 250
    (0, 1000)            --> 10 ^ +2 : 100, 125, 200, 250, 500, 1000
    (0, 4000)            --> 10 ^ +3 : 1000, 1250, 2000, 2500
    (0, 10000)           --> 10 ^ +3 : 1000, 1250, 2000, 2500, 5000, 10000
    (0, 400000)          --> 10 ^ +5 : 100000, 125000, 200000, 250000
    (0, 1000000)         --> 10 ^ +5 : 100000, 125000, 200000, 250000, 500000, 1e+06
    (0.0001, 0.0005)     --> 10 ^ -4 : 0.0001, 0.0002, 0.0005, 0.001
    (0.0001, 0.0012)     --> 10 ^ -4 : 0.0001, 0.0002, 0.0005, 0.001
    (0.0001, 0.0365)     --> 10 ^ -2 : 0.01, 0.02, 0.05, 0.1
    (0.000132, 0.000244) --> 10 ^ -5 : 1e-05, 2e-05, 5e-05, 0.0001
    (0.01, 0.05)         --> 10 ^ -2 : 0.01, 0.02, 0.05, 0.1
    (0.01, 0.12)         --> 10 ^ -2 : 0.01, 0.02, 0.05, 0.1
    (0.01, 3.65)         --> 10 ^ +0 : 1, 2, 5, 10
    (0.0132, 0.0244)     --> 10 ^ -3 : 0.001, 0.002, 0.005, 0.01
    (0.1, 0.5)           --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (0.1, 1.2)           --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (0.1, 36.5)          --> 10 ^ +1 : 10, 20, 25
    (0.132, 0.244)       --> 10 ^ -2 : 0.01, 0.02, 0.05, 0.1
    (1, 5)               --> 10 ^ +0 : 1, 2, 5, 10
    (1, 12)              --> 10 ^ +0 : 1, 2, 5, 10
    (1, 365)             --> 10 ^ +2 : 100, 125, 200, 250
    (1.32, 2.44)         --> 10 ^ -1 : 0.1, 0.2, 0.5, 1
    (10, 50)             --> 10 ^ +1 : 10, 20, 25
    (10, 120)            --> 10 ^ +1 : 10, 20, 25, 50, 100
    (10, 3650)           --> 10 ^ +3 : 1000, 1250, 2000, 2500
    (13.2, 24.4)         --> 10 ^ +0 : 1, 2, 5, 10
    (100, 500)           --> 10 ^ +2 : 100, 125, 200, 250
    (100, 1200)          --> 10 ^ +2 : 100, 125, 200, 250, 500, 1000
    (100, 36500)         --> 10 ^ +4 : 10000, 12500, 20000, 25000
    (132, 244)           --> 10 ^ +1 : 10, 20, 25, 50, 100
    (10000, 50000)       --> 10 ^ +4 : 10000, 12500, 20000, 25000
    (10000, 120000)      --> 10 ^ +4 : 10000, 12500, 20000, 25000, 50000, 100000
    (10000, 3650000)     --> 10 ^ +6 : 1e+06, 1.25e+06, 2e+06, 2.5e+06
    (13200, 24400)       --> 10 ^ +3 : 1000, 1250, 2000, 2500, 5000, 10000
    === 12 : (1, 3, 6, 12) ========================================
    (-320000, 420000)    --> 12 ^ +4 : 20736, 27648, 31104, 41472, 62208, 82944, 124416, 248832
    (-3200, 4200)        --> 12 ^ +2 : 144, 192, 216, 288, 432, 576, 864, 1728
    (-320, 420)          --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (-32, 42)            --> 12 ^ +0 : 1, 3, 6, 12
    (-3.2, 4.2)          --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (-0.32, 0.42)        --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (-0.0032, 0.0042)    --> 12 ^ -2 : 0.00694444, 0.0208333, 0.0416667, 0.0833333
    (0, 0.004)           --> 12 ^ -3 : 0.000578704, 0.00173611, 0.00347222, 0.00694444
    (0, 0.01)            --> 12 ^ -2 : 0.00694444, 0.0208333, 0.0416667, 0.0833333
    (0, 0.4)             --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0, 1)               --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0, 4)               --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0, 10)              --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0, 40)              --> 12 ^ +0 : 1, 3, 6, 12
    (0, 100)             --> 12 ^ +0 : 1, 3, 6, 12
    (0, 400)             --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (0, 1000)            --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (0, 4000)            --> 12 ^ +2 : 144, 192, 216, 288, 432, 576, 864, 1728
    (0, 10000)           --> 12 ^ +2 : 144, 192, 216, 288, 432, 576, 864, 1728
    (0, 400000)          --> 12 ^ +4 : 20736, 27648, 31104, 41472, 62208, 82944, 124416, 248832
    (0, 1000000)         --> 12 ^ +4 : 20736, 27648, 31104, 41472, 62208, 82944, 124416, 248832
    (0.0001, 0.0005)     --> 12 ^ -4 : 4.82253e-05, 0.000144676, 0.000289352, 0.000578704
    (0.0001, 0.0012)     --> 12 ^ -3 : 0.000578704, 0.00173611, 0.00347222, 0.00694444
    (0.0001, 0.0365)     --> 12 ^ -2 : 0.00694444, 0.0208333, 0.0416667, 0.0833333
    (0.000132, 0.000244) --> 12 ^ -4 : 4.82253e-05, 0.000144676, 0.000289352, 0.000578704
    (0.01, 0.05)         --> 12 ^ -2 : 0.00694444, 0.0208333, 0.0416667, 0.0833333
    (0.01, 0.12)         --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0.01, 3.65)         --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0.0132, 0.0244)     --> 12 ^ -2 : 0.00694444, 0.0208333, 0.0416667, 0.0833333
    (0.1, 0.5)           --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0.1, 1.2)           --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (0.1, 36.5)          --> 12 ^ +0 : 1, 3, 6, 12
    (0.132, 0.244)       --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (1, 5)               --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (1, 12)              --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (1, 365)             --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (1.32, 2.44)         --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (10, 50)             --> 12 ^ +0 : 1, 3, 6, 12
    (10, 120)            --> 12 ^ +0 : 1, 3, 6, 12
    (10, 3650)           --> 12 ^ +2 : 144, 192, 216, 288, 432, 576, 864, 1728
    (13.2, 24.4)         --> 12 ^ -1 : 0.0833333, 0.25, 0.5, 1
    (100, 500)           --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (100, 1200)          --> 12 ^ +1 : 12, 16, 18, 24, 36, 48, 72, 144
    (100, 36500)         --> 12 ^ +3 : 1728, 2304, 2592, 3456, 5184, 6912, 10368, 20736
    (132, 244)           --> 12 ^ +0 : 1, 3, 6, 12
    (10000, 50000)       --> 12 ^ +3 : 1728, 2304, 2592, 3456, 5184, 6912, 10368, 20736
    (10000, 120000)      --> 12 ^ +3 : 1728, 2304, 2592, 3456, 5184, 6912, 10368, 20736
    (10000, 3650000)     --> 12 ^ +5 : 248832, 331776, 373248, 497664, 746496, 995328, 1.49299e+06, 2.98598e+06
    (13200, 24400)       --> 12 ^ +2 : 144, 192, 216, 288, 432, 576, 864, 1728
    === 16 : (1, 2, 4, 8, 16) ========================================
    (-320000, 420000)    --> 16 ^ +4 : 65536, 131072, 262144, 524288
    (-3200, 4200)        --> 16 ^ +2 : 256, 512, 1024, 2048, 4096
    (-320, 420)          --> 16 ^ +1 : 16, 32, 64, 128, 256
    (-32, 42)            --> 16 ^ +1 : 16, 32, 64
    (-3.2, 4.2)          --> 16 ^ +0 : 1, 2, 4, 8, 16
    (-0.32, 0.42)        --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (-0.0032, 0.0042)    --> 16 ^ -3 : 0.000244141, 0.000488281, 0.000976562, 0.00195312, 0.00390625
    (0, 0.004)           --> 16 ^ -3 : 0.000244141, 0.000488281, 0.000976562, 0.00195312, 0.00390625
    (0, 0.01)            --> 16 ^ -3 : 0.000244141, 0.000488281, 0.000976562, 0.00195312, 0.00390625
    (0, 0.4)             --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0, 1)               --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0, 4)               --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0, 10)              --> 16 ^ +0 : 1, 2, 4, 8, 16
    (0, 40)              --> 16 ^ +0 : 1, 2, 4, 8, 16
    (0, 100)             --> 16 ^ +1 : 16, 32, 64
    (0, 400)             --> 16 ^ +1 : 16, 32, 64, 128, 256
    (0, 1000)            --> 16 ^ +1 : 16, 32, 64, 128, 256
    (0, 4000)            --> 16 ^ +2 : 256, 512, 1024, 2048
    (0, 10000)           --> 16 ^ +2 : 256, 512, 1024, 2048, 4096
    (0, 400000)          --> 16 ^ +4 : 65536, 131072, 262144
    (0, 1000000)         --> 16 ^ +4 : 65536, 131072, 262144, 524288
    (0.0001, 0.0005)     --> 16 ^ -4 : 1.52588e-05, 3.05176e-05, 6.10352e-05, 0.00012207, 0.000244141
    (0.0001, 0.0012)     --> 16 ^ -3 : 0.000244141, 0.000488281, 0.000976562, 0.00195312, 0.00390625
    (0.0001, 0.0365)     --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0.000132, 0.000244) --> 16 ^ -4 : 1.52588e-05, 3.05176e-05, 6.10352e-05, 0.00012207, 0.000244141
    (0.01, 0.05)         --> 16 ^ -2 : 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625
    (0.01, 0.12)         --> 16 ^ -2 : 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625
    (0.01, 3.65)         --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0.0132, 0.0244)     --> 16 ^ -3 : 0.000244141, 0.000488281, 0.000976562, 0.00195312, 0.00390625
    (0.1, 0.5)           --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0.1, 1.2)           --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (0.1, 36.5)          --> 16 ^ +0 : 1, 2, 4, 8, 16
    (0.132, 0.244)       --> 16 ^ -2 : 0.00390625, 0.0078125, 0.015625, 0.03125, 0.0625
    (1, 5)               --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (1, 12)              --> 16 ^ +0 : 1, 2, 4, 8, 16
    (1, 365)             --> 16 ^ +1 : 16, 32, 64, 128, 256
    (1.32, 2.44)         --> 16 ^ -1 : 0.0625, 0.125, 0.25, 0.5, 1
    (10, 50)             --> 16 ^ +0 : 1, 2, 4, 8, 16
    (10, 120)            --> 16 ^ +1 : 16, 32, 64
    (10, 3650)           --> 16 ^ +2 : 256, 512, 1024, 2048
    (13.2, 24.4)         --> 16 ^ +0 : 1, 2, 4, 8, 16
    (100, 500)           --> 16 ^ +1 : 16, 32, 64, 128, 256
    (100, 1200)          --> 16 ^ +2 : 256, 512, 1024
    (100, 36500)         --> 16 ^ +3 : 4096, 8192, 16384, 32768
    (132, 244)           --> 16 ^ +1 : 16, 32, 64
    (10000, 50000)       --> 16 ^ +3 : 4096, 8192, 16384, 32768
    (10000, 120000)      --> 16 ^ +3 : 4096, 8192, 16384, 32768, 65536
    (10000, 3650000)     --> 16 ^ +4 : 65536, 131072, 262144, 524288, 1.04858e+06
    (13200, 24400)       --> 16 ^ +2 : 256, 512, 1024, 2048, 4096

    >>> bases = Base (6), base_10, base_month, Base (16)
    >>> fmt = "%-20s : %12g -> %17s -> %17s"
    >>> fmt_t = "%2d * %12g"
    >>> for b in bases :
    ...   print ("=" * 3, b, "=" * 55)
    ...   for iv in intervals :
    ...     ax = Axis (b, * iv)
    ...     med_ticks = "" if not ax.medium_delta else \
    ...         fmt_t % (ax.medium_ticks + 1, ax.medium_delta)
    ...     min_ticks = "" if not ax.minor_delta else \
    ...         fmt_t % (ax.minor_ticks  + 1, ax.minor_delta)
    ...     print ((fmt % (portable_repr (iv), ax.major_delta, med_ticks, min_ticks)).rstrip ())
    ===  6 : (1, 2, 3, 6) =======================================================
    (-320000, 420000)    :       279936 ->  4 *        69984 ->  3 *        23328
    (-3200, 4200)        :         1296 ->  4 *          324 ->  3 *          108
    (-320, 420)          :          216 ->  4 *           54 ->  3 *           18
    (-32, 42)            :            6 ->  2 *            3 ->  3 *            1
    (-3.2, 4.2)          :            1 ->  2 *          0.5 ->  3 *     0.166667
    (-0.32, 0.42)        :     0.166667 ->  2 *    0.0833333 ->  3 *    0.0277778
    (-0.0032, 0.0042)    :  0.000771605 ->  2 *  0.000385802 ->  3 *  0.000128601
    (0, 0.004)           :  0.000771605 ->  2 *  0.000385802 ->  3 *  0.000128601
    (0, 0.01)            :  0.000771605 ->  2 *  0.000385802 ->  3 *  0.000128601
    (0, 0.4)             :    0.0277778 ->  2 *    0.0138889 ->  3 *   0.00462963
    (0, 1)               :     0.166667 ->  2 *    0.0833333 ->  3 *    0.0277778
    (0, 4)               :            1 ->  2 *          0.5 ->  3 *     0.166667
    (0, 10)              :            1 ->  2 *          0.5 ->  3 *     0.166667
    (0, 40)              :            6 ->  2 *            3 ->  3 *            1
    (0, 100)             :           36 ->  4 *            9 ->  3 *            3
    (0, 400)             :           36 ->  4 *            9 ->  2 *          4.5
    (0, 1000)            :          216 ->  4 *           54 ->  3 *           18
    (0, 4000)            :         1296 ->  4 *          324 ->  3 *          108
    (0, 10000)           :         1296 ->  4 *          324 ->  3 *          108
    (0, 400000)          :        46656 ->  4 *        11664 ->  2 *         5832
    (0, 1000000)         :       279936 ->  4 *        69984 ->  3 *        23328
    (0.0001, 0.0005)     :  0.000128601 ->  2 *  6.43004e-05 ->  3 *  2.14335e-05
    (0.0001, 0.0012)     :  0.000128601 ->  2 *  6.43004e-05 ->  3 *  2.14335e-05
    (0.0001, 0.0365)     :   0.00462963 ->  2 *   0.00231481 ->  3 *  0.000771605
    (0.000132, 0.000244) :  2.14335e-05 ->  2 *  1.07167e-05 ->  3 *  3.57225e-06
    (0.01, 0.05)         :   0.00462963 ->  2 *   0.00231481 ->  3 *  0.000771605
    (0.01, 0.12)         :    0.0277778 ->  2 *    0.0138889 ->  3 *   0.00462963
    (0.01, 3.65)         :            1 ->  2 *          0.5 ->  3 *     0.166667
    (0.0132, 0.0244)     :  0.000771605 ->  2 *  0.000385802 ->  3 *  0.000128601
    (0.1, 0.5)           :    0.0277778 ->  2 *    0.0138889 ->  3 *   0.00462963
    (0.1, 1.2)           :     0.166667 ->  2 *    0.0833333 ->  3 *    0.0277778
    (0.1, 36.5)          :            6 ->  2 *            3 ->  3 *            1
    (0.132, 0.244)       :    0.0277778 ->  2 *    0.0138889 ->  3 *   0.00462963
    (1, 5)               :            1 ->  2 *          0.5 ->  3 *     0.166667
    (1, 12)              :            1 ->  2 *          0.5 ->  3 *     0.166667
    (1, 365)             :           36 ->  4 *            9 ->  2 *          4.5
    (1.32, 2.44)         :     0.166667 ->  2 *    0.0833333 ->  3 *    0.0277778
    (10, 50)             :            6 ->  2 *            3 ->  3 *            1
    (10, 120)            :           36 ->  4 *            9 ->  3 *            3
    (10, 3650)           :         1296 ->  4 *          324 ->  3 *          108
    (13.2, 24.4)         :            1 ->  2 *          0.5 ->  3 *     0.166667
    (100, 500)           :           36 ->  4 *            9 ->  2 *          4.5
    (100, 1200)          :          216 ->  4 *           54 ->  3 *           18
    (100, 36500)         :         7776 ->  4 *         1944 ->  3 *          648
    (132, 244)           :           36 ->  4 *            9 ->  3 *            3
    (10000, 50000)       :         7776 ->  4 *         1944 ->  3 *          648
    (10000, 120000)      :         7776 ->  2 *         3888 ->  3 *         1296
    (10000, 3650000)     :       279936 ->  2 *       139968 ->  3 *        46656
    (13200, 24400)       :         1296 ->  4 *          324 ->  2 *          162
    === 10 : (1, 2, 5, 10) =======================================================
    (-320000, 420000)    :       100000 ->  2 *        50000 ->  5 *        10000
    (-3200, 4200)        :         1000 ->  2 *          500 ->  5 *          100
    (-320, 420)          :          100 ->  2 *           50 ->  5 *           10
    (-32, 42)            :           10 ->  2 *            5 ->  5 *            1
    (-3.2, 4.2)          :            1 ->  2 *          0.5 ->  5 *          0.1
    (-0.32, 0.42)        :          0.1 ->  2 *         0.05 ->  5 *         0.01
    (-0.0032, 0.0042)    :        0.001 ->  2 *       0.0005 ->  5 *       0.0001
    (0, 0.004)           :        0.001 ->  2 *       0.0005 ->  5 *       0.0001
    (0, 0.01)            :        0.001 ->  2 *       0.0005 ->  5 *       0.0001
    (0, 0.4)             :          0.1 ->  2 *         0.05 ->  5 *         0.01
    (0, 1)               :          0.1 ->  2 *         0.05 ->  2 *        0.025
    (0, 4)               :            1 ->  2 *          0.5 ->  5 *          0.1
    (0, 10)              :            1 ->  2 *          0.5 ->  5 *          0.1
    (0, 40)              :           10 ->  2 *            5 ->  5 *            1
    (0, 100)             :           10 ->  2 *            5 ->  5 *            1
    (0, 400)             :          100 ->  4 *           25 ->  5 *            5
    (0, 1000)            :          100 ->  2 *           50 ->  5 *           10
    (0, 4000)            :         1000 ->  4 *          250 ->  5 *           50
    (0, 10000)           :         1000 ->  2 *          500 ->  5 *          100
    (0, 400000)          :       100000 ->  4 *        25000 ->  5 *         5000
    (0, 1000000)         :       100000 ->  2 *        50000 ->  5 *        10000
    (0.0001, 0.0005)     :       0.0001 ->  2 *        5e-05 ->  5 *        1e-05
    (0.0001, 0.0012)     :       0.0001 ->  2 *        5e-05 ->  2 *      2.5e-05
    (0.0001, 0.0365)     :         0.01 ->  2 *        0.005 ->  5 *        0.001
    (0.000132, 0.000244) :        1e-05 ->  2 *        5e-06 ->  2 *      2.5e-06
    (0.01, 0.05)         :         0.01 ->  2 *        0.005 ->  5 *        0.001
    (0.01, 0.12)         :         0.01 ->  2 *        0.005 ->  2 *       0.0025
    (0.01, 3.65)         :            1 ->  2 *          0.5 ->  5 *          0.1
    (0.0132, 0.0244)     :        0.001 ->  2 *       0.0005 ->  2 *      0.00025
    (0.1, 0.5)           :          0.1 ->  2 *         0.05 ->  5 *         0.01
    (0.1, 1.2)           :          0.1 ->  2 *         0.05 ->  2 *        0.025
    (0.1, 36.5)          :           10 ->  2 *            5 ->  5 *            1
    (0.132, 0.244)       :         0.01 ->  2 *        0.005 ->  2 *       0.0025
    (1, 5)               :            1 ->  2 *          0.5 ->  5 *          0.1
    (1, 12)              :            1 ->  2 *          0.5 ->  2 *         0.25
    (1, 365)             :          100 ->  4 *           25 ->  5 *            5
    (1.32, 2.44)         :          0.1 ->  2 *         0.05 ->  2 *        0.025
    (10, 50)             :           10 ->  2 *            5 ->  5 *            1
    (10, 120)            :           10 ->  2 *            5 ->  2 *          2.5
    (10, 3650)           :         1000 ->  4 *          250 ->  5 *           50
    (13.2, 24.4)         :            1 ->  2 *          0.5 ->  2 *         0.25
    (100, 500)           :          100 ->  4 *           25 ->  5 *            5
    (100, 1200)          :          100 ->  4 *           25 ->  2 *         12.5
    (100, 36500)         :        10000 ->  4 *         2500 ->  5 *          500
    (132, 244)           :           10 ->  2 *            5 ->  2 *          2.5
    (10000, 50000)       :        10000 ->  4 *         2500 ->  5 *          500
    (10000, 120000)      :        10000 ->  4 *         2500 ->  2 *         1250
    (10000, 3650000)     :        1e+06 ->  4 *       250000 ->  5 *        50000
    (13200, 24400)       :         1000 ->  4 *          250 ->  2 *          125
    === 12 : (1, 3, 6, 12) =======================================================
    (-320000, 420000)    :        41472 ->  4 *        10368 ->
    (-3200, 4200)        :          432 ->  2 *          216 ->  3 *           72
    (-320, 420)          :           48 ->  2 *           24 ->  3 *            8
    (-32, 42)            :            6 ->  2 *            3 ->  3 *            1
    (-3.2, 4.2)          :            1 ->                   ->
    (-0.32, 0.42)        :            1 ->                   ->
    (-0.0032, 0.0042)    :            1 ->                   ->
    (0, 0.004)           :            1 ->                   ->
    (0, 0.01)            :            1 ->                   ->
    (0, 0.4)             :            1 ->                   ->
    (0, 1)               :            1 ->                   ->
    (0, 4)               :            1 ->                   ->
    (0, 10)              :            1 ->                   ->
    (0, 40)              :            3 ->  3 *            1 ->
    (0, 100)             :            6 ->  2 *            3 ->  3 *            1
    (0, 400)             :           24 ->  2 *           12 ->  3 *            4
    (0, 1000)            :           72 ->  2 *           36 ->  3 *           12
    (0, 4000)            :          216 ->  4 *           54 ->
    (0, 10000)           :          576 ->  2 *          288 ->  3 *           96
    (0, 400000)          :        20736 ->  4 *         5184 ->
    (0, 1000000)         :        62208 ->  2 *        31104 ->  3 *        10368
    (0.0001, 0.0005)     :            1 ->                   ->
    (0.0001, 0.0012)     :            1 ->                   ->
    (0.0001, 0.0365)     :            1 ->                   ->
    (0.000132, 0.000244) :            1 ->                   ->
    (0.01, 0.05)         :            1 ->                   ->
    (0.01, 0.12)         :            1 ->                   ->
    (0.01, 3.65)         :            1 ->                   ->
    (0.0132, 0.0244)     :            1 ->                   ->
    (0.1, 0.5)           :            1 ->                   ->
    (0.1, 1.2)           :            1 ->                   ->
    (0.1, 36.5)          :            3 ->  3 *            1 ->
    (0.132, 0.244)       :            1 ->                   ->
    (1, 5)               :            1 ->                   ->
    (1, 12)              :            1 ->                   ->
    (1, 365)             :           24 ->  2 *           12 ->  3 *            4
    (1.32, 2.44)         :            1 ->                   ->
    (10, 50)             :            3 ->  3 *            1 ->
    (10, 120)            :            6 ->  2 *            3 ->
    (10, 3650)           :          192 ->  4 *           48 ->
    (13.2, 24.4)         :            1 ->                   ->
    (100, 500)           :           24 ->  2 *           12 ->  3 *            4
    (100, 1200)          :           72 ->  2 *           36 ->  3 *           12
    (100, 36500)         :         2304 ->  2 *         1152 ->  3 *          384
    (132, 244)           :            6 ->  2 *            3 ->
    (10000, 50000)       :         2304 ->  2 *         1152 ->  3 *          384
    (10000, 120000)      :         6912 ->  2 *         3456 ->  3 *         1152
    (10000, 3650000)     :       248832 ->  2 *       124416 ->  3 *        41472
    (13200, 24400)       :          576 ->  4 *          144 ->
    === 16 : (1, 2, 4, 8, 16) =======================================================
    (-320000, 420000)    :        65536 ->  4 *        16384 ->  2 *         8192
    (-3200, 4200)        :          512 ->  2 *          256 ->  2 *          128
    (-320, 420)          :           64 ->  4 *           16 ->  2 *            8
    (-32, 42)            :           16 ->  4 *            4 ->  4 *            1
    (-3.2, 4.2)          :            1 ->  4 *         0.25 ->  2 *        0.125
    (-0.32, 0.42)        :       0.0625 ->  4 *     0.015625 ->  2 *    0.0078125
    (-0.0032, 0.0042)    :  0.000488281 ->  2 *  0.000244141 ->  2 *   0.00012207
    (0, 0.004)           :  0.000244141 ->  2 *   0.00012207 ->  2 *  6.10352e-05
    (0, 0.01)            :  0.000976562 ->  4 *  0.000244141 ->  2 *   0.00012207
    (0, 0.4)             :       0.0625 ->  4 *     0.015625 ->  2 *    0.0078125
    (0, 1)               :       0.0625 ->  2 *      0.03125 ->  2 *     0.015625
    (0, 4)               :         0.25 ->  2 *        0.125 ->  2 *       0.0625
    (0, 10)              :            1 ->  4 *         0.25 ->  2 *        0.125
    (0, 40)              :            2 ->  2 *            1 ->  2 *          0.5
    (0, 100)             :           16 ->  4 *            4 ->  2 *            2
    (0, 400)             :           32 ->  4 *            8 ->  2 *            4
    (0, 1000)            :           64 ->  2 *           32 ->  2 *           16
    (0, 4000)            :          256 ->  2 *          128 ->  2 *           64
    (0, 10000)           :          512 ->  2 *          256 ->  2 *          128
    (0, 400000)          :        65536 ->  4 *        16384 ->  2 *         8192
    (0, 1000000)         :        65536 ->  2 *        32768 ->  2 *        16384
    (0.0001, 0.0005)     :  3.05176e-05 ->  2 *  1.52588e-05 ->  2 *  7.62939e-06
    (0.0001, 0.0012)     :  0.000244141 ->  4 *  6.10352e-05 ->  4 *  1.52588e-05
    (0.0001, 0.0365)     :       0.0625 ->  4 *     0.015625 ->  8 *   0.00195312
    (0.000132, 0.000244) :  1.52588e-05 ->  4 *   3.8147e-06 ->  2 *  1.90735e-06
    (0.01, 0.05)         :   0.00390625 ->  4 *  0.000976562 ->  2 *  0.000488281
    (0.01, 0.12)         :    0.0078125 ->  2 *   0.00390625 ->  2 *   0.00195312
    (0.01, 3.65)         :         0.25 ->  2 *        0.125 ->  2 *       0.0625
    (0.0132, 0.0244)     :  0.000976562 ->  4 *  0.000244141 ->  2 *   0.00012207
    (0.1, 0.5)           :       0.0625 ->  4 *     0.015625 ->  2 *    0.0078125
    (0.1, 1.2)           :       0.0625 ->  2 *      0.03125 ->  2 *     0.015625
    (0.1, 36.5)          :            2 ->  2 *            1 ->  2 *          0.5
    (0.132, 0.244)       :    0.0078125 ->  2 *   0.00390625 ->  2 *   0.00195312
    (1, 5)               :         0.25 ->  2 *        0.125 ->  2 *       0.0625
    (1, 12)              :            1 ->  4 *         0.25 ->  2 *        0.125
    (1, 365)             :           32 ->  4 *            8 ->  2 *            4
    (1.32, 2.44)         :       0.0625 ->  2 *      0.03125 ->  2 *     0.015625
    (10, 50)             :            2 ->  2 *            1 ->  2 *          0.5
    (10, 120)            :           16 ->  4 *            4 ->  2 *            2
    (10, 3650)           :          256 ->  2 *          128 ->  2 *           64
    (13.2, 24.4)         :            1 ->  4 *         0.25 ->  2 *        0.125
    (100, 500)           :           32 ->  4 *            8 ->  2 *            4
    (100, 1200)          :          256 ->  4 *           64 ->  4 *           16
    (100, 36500)         :         4096 ->  4 *         1024 ->  2 *          512
    (132, 244)           :           16 ->  4 *            4 ->  2 *            2
    (10000, 50000)       :         4096 ->  4 *         1024 ->  2 *          512
    (10000, 120000)      :         8192 ->  2 *         4096 ->  2 *         2048
    (10000, 3650000)     :       262144 ->  2 *       131072 ->  2 *        65536
    (13200, 24400)       :         1024 ->  4 *          256 ->  2 *          128

    >>> fmt = "%-20s : %2d ^ %+d [%d] %3d * %g"
    >>> for b in bases :
    ...   for m in (8, 20) :
    ...     print ("=" * 3, "base", b, "max-ticks", m, "=" * 30)
    ...     for iv in intervals :
    ...         ax = Axis (b, * iv, max_major_ticks = m)
    ...         try :
    ...             index = ax.scaled.deltas.index (ax.major_delta)
    ...         except ValueError :
    ...             pass
    ...         else:
    ...             print (fmt % (portable_repr (iv), ax.scaled.base, ax.scaled.scale, index, len (ax.major_range), ax.major_delta))
    === base  6 : (1, 2, 3, 6) max-ticks 8 ==============================
    (-320000, 420000)    :  6 ^ +7 [0]   5 * 279936
    (-3200, 4200)        :  6 ^ +4 [0]   8 * 1296
    (-320, 420)          :  6 ^ +3 [0]   5 * 216
    (-32, 42)            :  6 ^ +1 [2]   8 * 12
    (-3.2, 4.2)          :  6 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        :  6 ^ -1 [0]   6 * 0.166667
    (-0.0032, 0.0042)    :  6 ^ -4 [1]   7 * 0.00154321
    (0, 0.004)           :  6 ^ -4 [0]   7 * 0.000771605
    (0, 0.01)            :  6 ^ -4 [1]   8 * 0.00154321
    (0, 0.4)             :  6 ^ -2 [1]   9 * 0.0555556
    (0, 1)               :  6 ^ -1 [0]   8 * 0.166667
    (0, 4)               :  6 ^ +0 [0]   5 * 1
    (0, 10)              :  6 ^ +0 [1]   6 * 2
    (0, 40)              :  6 ^ +1 [0]   8 * 6
    (0, 100)             :  6 ^ +2 [0]   4 * 36
    (0, 400)             :  6 ^ +2 [1]   9 * 54
    (0, 1000)            :  6 ^ +3 [0]   6 * 216
    (0, 4000)            :  6 ^ +4 [0]   5 * 1296
    (0, 10000)           :  6 ^ +4 [0]   9 * 1296
    (0, 400000)          :  6 ^ +6 [1]   7 * 69984
    (0, 1000000)         :  6 ^ +7 [0]   5 * 279936
    (0.0001, 0.0005)     :  6 ^ -5 [0]   5 * 0.000128601
    (0.0001, 0.0012)     :  6 ^ -5 [1]   6 * 0.000257202
    (0.0001, 0.0365)     :  6 ^ -3 [0]   9 * 0.00462963
    (0.000132, 0.000244) :  6 ^ -6 [0]   7 * 2.14335e-05
    (0.01, 0.05)         :  6 ^ -3 [1]   6 * 0.00925926
    (0.01, 0.12)         :  6 ^ -2 [0]   6 * 0.0277778
    (0.01, 3.65)         :  6 ^ +0 [0]   5 * 1
    (0.0132, 0.0244)     :  6 ^ -4 [1]   9 * 0.00154321
    (0.1, 0.5)           :  6 ^ -2 [1]  10 * 0.0555556
    (0.1, 1.2)           :  6 ^ -1 [0]   9 * 0.166667
    (0.1, 36.5)          :  6 ^ +1 [0]   8 * 6
    (0.132, 0.244)       :  6 ^ -2 [0]   6 * 0.0277778
    (1, 5)               :  6 ^ +0 [0]   5 * 1
    (1, 12)              :  6 ^ +0 [1]   7 * 2
    (1, 365)             :  6 ^ +2 [1]   8 * 54
    (1.32, 2.44)         :  6 ^ -1 [0]   9 * 0.166667
    (10, 50)             :  6 ^ +1 [0]   9 * 6
    (10, 120)            :  6 ^ +2 [0]   5 * 36
    (10, 3650)           :  6 ^ +4 [0]   4 * 1296
    (13.2, 24.4)         :  6 ^ +0 [1]   8 * 2
    (100, 500)           :  6 ^ +2 [1]  10 * 54
    (100, 1200)          :  6 ^ +3 [0]   7 * 216
    (100, 36500)         :  6 ^ +5 [0]   6 * 7776
    (132, 244)           :  6 ^ +2 [0]   5 * 36
    (10000, 50000)       :  6 ^ +5 [0]   7 * 7776
    (10000, 120000)      :  6 ^ +5 [2]   9 * 15552
    (10000, 3650000)     :  6 ^ +7 [2]   8 * 559872
    (13200, 24400)       :  6 ^ +4 [1]   8 * 1944
    === base  6 : (1, 2, 3, 6) max-ticks 20 ==============================
    (-320000, 420000)    :  6 ^ +7 [0]   5 * 279936
    (-3200, 4200)        :  6 ^ +4 [0]   8 * 1296
    (-320, 420)          :  6 ^ +3 [0]   5 * 216
    (-32, 42)            :  6 ^ +1 [0]  14 * 6
    (-3.2, 4.2)          :  6 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        :  6 ^ -1 [0]   6 * 0.166667
    (-0.0032, 0.0042)    :  6 ^ -4 [0]  12 * 0.000771605
    (0, 0.004)           :  6 ^ -4 [0]   7 * 0.000771605
    (0, 0.01)            :  6 ^ -4 [0]  14 * 0.000771605
    (0, 0.4)             :  6 ^ -2 [0]  16 * 0.0277778
    (0, 1)               :  6 ^ -1 [0]   8 * 0.166667
    (0, 4)               :  6 ^ +0 [0]   5 * 1
    (0, 10)              :  6 ^ +0 [0]  11 * 1
    (0, 40)              :  6 ^ +1 [0]   8 * 6
    (0, 100)             :  6 ^ +2 [0]   4 * 36
    (0, 400)             :  6 ^ +2 [0]  13 * 36
    (0, 1000)            :  6 ^ +3 [0]   6 * 216
    (0, 4000)            :  6 ^ +4 [0]   5 * 1296
    (0, 10000)           :  6 ^ +4 [0]   9 * 1296
    (0, 400000)          :  6 ^ +6 [0]  10 * 46656
    (0, 1000000)         :  6 ^ +7 [0]   5 * 279936
    (0.0001, 0.0005)     :  6 ^ -5 [0]   5 * 0.000128601
    (0.0001, 0.0012)     :  6 ^ -5 [0]  11 * 0.000128601
    (0.0001, 0.0365)     :  6 ^ -3 [0]   9 * 0.00462963
    (0.000132, 0.000244) :  6 ^ -6 [0]   7 * 2.14335e-05
    (0.01, 0.05)         :  6 ^ -3 [0]  10 * 0.00462963
    (0.01, 0.12)         :  6 ^ -2 [0]   6 * 0.0277778
    (0.01, 3.65)         :  6 ^ +0 [0]   5 * 1
    (0.0132, 0.0244)     :  6 ^ -4 [0]  16 * 0.000771605
    (0.1, 0.5)           :  6 ^ -2 [0]  17 * 0.0277778
    (0.1, 1.2)           :  6 ^ -1 [0]   9 * 0.166667
    (0.1, 36.5)          :  6 ^ +1 [0]   8 * 6
    (0.132, 0.244)       :  6 ^ -2 [0]   6 * 0.0277778
    (1, 5)               :  6 ^ +0 [0]   5 * 1
    (1, 12)              :  6 ^ +0 [0]  12 * 1
    (1, 365)             :  6 ^ +2 [0]  12 * 36
    (1.32, 2.44)         :  6 ^ -1 [0]   9 * 0.166667
    (10, 50)             :  6 ^ +1 [0]   9 * 6
    (10, 120)            :  6 ^ +2 [0]   5 * 36
    (10, 3650)           :  6 ^ +4 [0]   4 * 1296
    (13.2, 24.4)         :  6 ^ +0 [0]  13 * 1
    (100, 500)           :  6 ^ +2 [0]  13 * 36
    (100, 1200)          :  6 ^ +3 [0]   7 * 216
    (100, 36500)         :  6 ^ +5 [0]   6 * 7776
    (132, 244)           :  6 ^ +2 [0]   5 * 36
    (10000, 50000)       :  6 ^ +5 [0]   7 * 7776
    (10000, 120000)      :  6 ^ +5 [0]  16 * 7776
    (10000, 3650000)     :  6 ^ +7 [0]  15 * 279936
    (13200, 24400)       :  6 ^ +4 [0]  10 * 1296
    === base 10 : (1, 2, 5, 10) max-ticks 8 ==============================
    (-320000, 420000)    : 10 ^ +5 [0]  10 * 100000
    (-3200, 4200)        : 10 ^ +3 [0]  10 * 1000
    (-320, 420)          : 10 ^ +2 [0]  10 * 100
    (-32, 42)            : 10 ^ +1 [0]  10 * 10
    (-3.2, 4.2)          : 10 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        : 10 ^ -1 [0]  10 * 0.1
    (-0.0032, 0.0042)    : 10 ^ -3 [0]  10 * 0.001
    (0, 0.004)           : 10 ^ -3 [0]   5 * 0.001
    (0, 0.01)            : 10 ^ -3 [1]   6 * 0.002
    (0, 0.4)             : 10 ^ -1 [0]   5 * 0.1
    (0, 1)               : 10 ^ -1 [1]   6 * 0.2
    (0, 4)               : 10 ^ +0 [0]   5 * 1
    (0, 10)              : 10 ^ +0 [1]   6 * 2
    (0, 40)              : 10 ^ +1 [0]   5 * 10
    (0, 100)             : 10 ^ +1 [1]   6 * 20
    (0, 400)             : 10 ^ +2 [0]   5 * 100
    (0, 1000)            : 10 ^ +2 [1]   9 * 125
    (0, 4000)            : 10 ^ +3 [0]   5 * 1000
    (0, 10000)           : 10 ^ +3 [1]   9 * 1250
    (0, 400000)          : 10 ^ +5 [0]   5 * 100000
    (0, 1000000)         : 10 ^ +5 [1]   9 * 125000
    (0.0001, 0.0005)     : 10 ^ -4 [0]   6 * 0.0001
    (0.0001, 0.0012)     : 10 ^ -4 [1]   8 * 0.0002
    (0.0001, 0.0365)     : 10 ^ -2 [0]   5 * 0.01
    (0.000132, 0.000244) : 10 ^ -5 [1]   8 * 2e-05
    (0.01, 0.05)         : 10 ^ -2 [0]   6 * 0.01
    (0.01, 0.12)         : 10 ^ -2 [1]   7 * 0.02
    (0.01, 3.65)         : 10 ^ +0 [0]   5 * 1
    (0.0132, 0.0244)     : 10 ^ -3 [1]   8 * 0.002
    (0.1, 0.5)           : 10 ^ -1 [0]   5 * 0.1
    (0.1, 1.2)           : 10 ^ -1 [1]   8 * 0.2
    (0.1, 36.5)          : 10 ^ +1 [0]   5 * 10
    (0.132, 0.244)       : 10 ^ -2 [1]   8 * 0.02
    (1, 5)               : 10 ^ +0 [0]   5 * 1
    (1, 12)              : 10 ^ +0 [1]   7 * 2
    (1, 365)             : 10 ^ +2 [0]   5 * 100
    (1.32, 2.44)         : 10 ^ -1 [1]   8 * 0.2
    (10, 50)             : 10 ^ +1 [0]   5 * 10
    (10, 120)            : 10 ^ +1 [1]   7 * 20
    (10, 3650)           : 10 ^ +3 [0]   5 * 1000
    (13.2, 24.4)         : 10 ^ +0 [1]   8 * 2
    (100, 500)           : 10 ^ +2 [0]   5 * 100
    (100, 1200)          : 10 ^ +2 [2]   7 * 200
    (100, 36500)         : 10 ^ +4 [0]   5 * 10000
    (132, 244)           : 10 ^ +1 [1]   8 * 20
    (10000, 50000)       : 10 ^ +4 [0]   5 * 10000
    (10000, 120000)      : 10 ^ +4 [2]   7 * 20000
    (10000, 3650000)     : 10 ^ +6 [0]   5 * 1e+06
    (13200, 24400)       : 10 ^ +3 [2]   8 * 2000
    === base 10 : (1, 2, 5, 10) max-ticks 20 ==============================
    (-320000, 420000)    : 10 ^ +5 [0]  10 * 100000
    (-3200, 4200)        : 10 ^ +3 [0]  10 * 1000
    (-320, 420)          : 10 ^ +2 [0]  10 * 100
    (-32, 42)            : 10 ^ +1 [0]  10 * 10
    (-3.2, 4.2)          : 10 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        : 10 ^ -1 [0]  10 * 0.1
    (-0.0032, 0.0042)    : 10 ^ -3 [0]  10 * 0.001
    (0, 0.004)           : 10 ^ -3 [0]   5 * 0.001
    (0, 0.01)            : 10 ^ -3 [0]  11 * 0.001
    (0, 0.4)             : 10 ^ -1 [0]   5 * 0.1
    (0, 1)               : 10 ^ -1 [0]  12 * 0.1
    (0, 4)               : 10 ^ +0 [0]   5 * 1
    (0, 10)              : 10 ^ +0 [0]  11 * 1
    (0, 40)              : 10 ^ +1 [0]   5 * 10
    (0, 100)             : 10 ^ +1 [0]  11 * 10
    (0, 400)             : 10 ^ +2 [0]   5 * 100
    (0, 1000)            : 10 ^ +2 [0]  11 * 100
    (0, 4000)            : 10 ^ +3 [0]   5 * 1000
    (0, 10000)           : 10 ^ +3 [0]  11 * 1000
    (0, 400000)          : 10 ^ +5 [0]   5 * 100000
    (0, 1000000)         : 10 ^ +5 [0]  11 * 100000
    (0.0001, 0.0005)     : 10 ^ -4 [0]   6 * 0.0001
    (0.0001, 0.0012)     : 10 ^ -4 [0]  13 * 0.0001
    (0.0001, 0.0365)     : 10 ^ -2 [0]   5 * 0.01
    (0.000132, 0.000244) : 10 ^ -5 [0]  13 * 1e-05
    (0.01, 0.05)         : 10 ^ -2 [0]   6 * 0.01
    (0.01, 0.12)         : 10 ^ -2 [0]  13 * 0.01
    (0.01, 3.65)         : 10 ^ +0 [0]   5 * 1
    (0.0132, 0.0244)     : 10 ^ -3 [0]  13 * 0.001
    (0.1, 0.5)           : 10 ^ -1 [0]   5 * 0.1
    (0.1, 1.2)           : 10 ^ -1 [0]  13 * 0.1
    (0.1, 36.5)          : 10 ^ +1 [0]   5 * 10
    (0.132, 0.244)       : 10 ^ -2 [0]  13 * 0.01
    (1, 5)               : 10 ^ +0 [0]   5 * 1
    (1, 12)              : 10 ^ +0 [0]  12 * 1
    (1, 365)             : 10 ^ +2 [0]   5 * 100
    (1.32, 2.44)         : 10 ^ -1 [0]  13 * 0.1
    (10, 50)             : 10 ^ +1 [0]   5 * 10
    (10, 120)            : 10 ^ +1 [0]  12 * 10
    (10, 3650)           : 10 ^ +3 [0]   5 * 1000
    (13.2, 24.4)         : 10 ^ +0 [0]  13 * 1
    (100, 500)           : 10 ^ +2 [0]   5 * 100
    (100, 1200)          : 10 ^ +2 [0]  12 * 100
    (100, 36500)         : 10 ^ +4 [0]   5 * 10000
    (132, 244)           : 10 ^ +1 [0]  13 * 10
    (10000, 50000)       : 10 ^ +4 [0]   5 * 10000
    (10000, 120000)      : 10 ^ +4 [0]  12 * 10000
    (10000, 3650000)     : 10 ^ +6 [0]   5 * 1e+06
    (13200, 24400)       : 10 ^ +3 [0]  13 * 1000
    === base 12 : (1, 3, 6, 12) max-ticks 8 ==============================
    (-320000, 420000)    : 12 ^ +4 [6]   8 * 124416
    (-3200, 4200)        : 12 ^ +2 [7]   6 * 1728
    (-320, 420)          : 12 ^ +1 [7]   7 * 144
    (-32, 42)            : 12 ^ +0 [3]   8 * 12
    (-3.2, 4.2)          : 12 ^ -1 [3]  10 * 1
    (-0.32, 0.42)        : 12 ^ -1 [3]   3 * 1
    (0, 0.4)             : 12 ^ -1 [3]   2 * 1
    (0, 1)               : 12 ^ -1 [3]   2 * 1
    (0, 4)               : 12 ^ -1 [3]   5 * 1
    (0, 10)              : 12 ^ -1 [3]  11 * 1
    (0, 40)              : 12 ^ +0 [2]   8 * 6
    (0, 100)             : 12 ^ +0 [3]  10 * 12
    (0, 400)             : 12 ^ +1 [6]   7 * 72
    (0, 1000)            : 12 ^ +1 [7]   8 * 144
    (0, 4000)            : 12 ^ +2 [5]   8 * 576
    (0, 10000)           : 12 ^ +2 [7]   7 * 1728
    (0, 400000)          : 12 ^ +4 [4]   8 * 62208
    (0, 1000000)         : 12 ^ +4 [7]   6 * 248832
    (0.01, 0.12)         : 12 ^ -1 [3]   2 * 1
    (0.01, 3.65)         : 12 ^ -1 [3]   5 * 1
    (0.1, 0.5)           : 12 ^ -1 [3]   2 * 1
    (0.1, 1.2)           : 12 ^ -1 [3]   3 * 1
    (0.1, 36.5)          : 12 ^ +0 [2]   8 * 6
    (0.132, 0.244)       : 12 ^ -1 [3]   2 * 1
    (1, 5)               : 12 ^ -1 [3]   5 * 1
    (1, 12)              : 12 ^ -1 [3]  12 * 1
    (1, 365)             : 12 ^ +1 [5]   9 * 48
    (1.32, 2.44)         : 12 ^ -1 [3]   3 * 1
    (10, 50)             : 12 ^ +0 [2]   9 * 6
    (10, 120)            : 12 ^ +0 [3]  11 * 12
    (10, 3650)           : 12 ^ +2 [5]   8 * 576
    (13.2, 24.4)         : 12 ^ -1 [3]  13 * 1
    (100, 500)           : 12 ^ +1 [6]   7 * 72
    (100, 1200)          : 12 ^ +1 [7]  10 * 144
    (100, 36500)         : 12 ^ +3 [4]   9 * 5184
    (132, 244)           : 12 ^ +0 [3]  11 * 12
    (10000, 50000)       : 12 ^ +3 [4]  10 * 5184
    (10000, 120000)      : 12 ^ +3 [7]   7 * 20736
    (10000, 3650000)     : 12 ^ +5 [3]   9 * 497664
    (13200, 24400)       : 12 ^ +2 [7]   9 * 1728
    === base 12 : (1, 3, 6, 12) max-ticks 20 ==============================
    (-320000, 420000)    : 12 ^ +4 [3]  20 * 41472
    (-3200, 4200)        : 12 ^ +2 [4]  19 * 432
    (-320, 420)          : 12 ^ +1 [5]  17 * 48
    (-32, 42)            : 12 ^ +0 [2]  14 * 6
    (-3.2, 4.2)          : 12 ^ -1 [3]  10 * 1
    (-0.32, 0.42)        : 12 ^ -1 [3]   3 * 1
    (0, 0.4)             : 12 ^ -1 [3]   2 * 1
    (0, 1)               : 12 ^ -1 [3]   2 * 1
    (0, 4)               : 12 ^ -1 [3]   5 * 1
    (0, 10)              : 12 ^ -1 [3]  11 * 1
    (0, 40)              : 12 ^ +0 [1]  15 * 3
    (0, 100)             : 12 ^ +0 [2]  18 * 6
    (0, 400)             : 12 ^ +1 [3]  18 * 24
    (0, 1000)            : 12 ^ +1 [6]  15 * 72
    (0, 4000)            : 12 ^ +2 [2]  20 * 216
    (0, 10000)           : 12 ^ +2 [5]  19 * 576
    (0, 400000)          : 12 ^ +4 [0]  21 * 20736
    (0, 1000000)         : 12 ^ +4 [4]  18 * 62208
    (0.01, 0.12)         : 12 ^ -1 [3]   2 * 1
    (0.01, 3.65)         : 12 ^ -1 [3]   5 * 1
    (0.1, 0.5)           : 12 ^ -1 [3]   2 * 1
    (0.1, 1.2)           : 12 ^ -1 [3]   3 * 1
    (0.1, 36.5)          : 12 ^ +0 [1]  14 * 3
    (0.132, 0.244)       : 12 ^ -1 [3]   2 * 1
    (1, 5)               : 12 ^ -1 [3]   5 * 1
    (1, 12)              : 12 ^ -1 [3]  12 * 1
    (1, 365)             : 12 ^ +1 [3]  17 * 24
    (1.32, 2.44)         : 12 ^ -1 [3]   3 * 1
    (10, 50)             : 12 ^ +0 [1]  15 * 3
    (10, 120)            : 12 ^ +0 [2]  20 * 6
    (10, 3650)           : 12 ^ +2 [1]  21 * 192
    (13.2, 24.4)         : 12 ^ -1 [3]  13 * 1
    (100, 500)           : 12 ^ +1 [3]  18 * 24
    (100, 1200)          : 12 ^ +1 [6]  17 * 72
    (100, 36500)         : 12 ^ +3 [1]  17 * 2304
    (132, 244)           : 12 ^ +0 [2]  20 * 6
    (10000, 50000)       : 12 ^ +3 [1]  19 * 2304
    (10000, 120000)      : 12 ^ +3 [5]  18 * 6912
    (10000, 3650000)     : 12 ^ +5 [0]  16 * 248832
    (13200, 24400)       : 12 ^ +2 [5]  22 * 576
    === base 16 : (1, 2, 4, 8, 16) max-ticks 8 ==============================
    (-320000, 420000)    : 16 ^ +4 [1]   8 * 131072
    (-3200, 4200)        : 16 ^ +2 [2]  10 * 1024
    (-320, 420)          : 16 ^ +1 [3]   8 * 128
    (-32, 42)            : 16 ^ +1 [0]   6 * 16
    (-3.2, 4.2)          : 16 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        : 16 ^ -1 [1]   8 * 0.125
    (-0.0032, 0.0042)    : 16 ^ -3 [2]  10 * 0.000976562
    (0, 0.004)           : 16 ^ -3 [2]   6 * 0.000976562
    (0, 0.01)            : 16 ^ -3 [3]   7 * 0.00195312
    (0, 0.4)             : 16 ^ -1 [0]   8 * 0.0625
    (0, 1)               : 16 ^ -1 [1]   9 * 0.125
    (0, 4)               : 16 ^ -1 [3]   9 * 0.5
    (0, 10)              : 16 ^ +0 [1]   6 * 2
    (0, 40)              : 16 ^ +0 [3]   6 * 8
    (0, 100)             : 16 ^ +1 [0]   8 * 16
    (0, 400)             : 16 ^ +1 [2]   8 * 64
    (0, 1000)            : 16 ^ +1 [3]   9 * 128
    (0, 4000)            : 16 ^ +2 [1]   9 * 512
    (0, 10000)           : 16 ^ +2 [3]   6 * 2048
    (0, 400000)          : 16 ^ +4 [0]   8 * 65536
    (0, 1000000)         : 16 ^ +4 [1]   9 * 131072
    (0.0001, 0.0005)     : 16 ^ -4 [2]   9 * 6.10352e-05
    (0.0001, 0.0012)     : 16 ^ -3 [0]   6 * 0.000244141
    (0.0001, 0.0365)     : 16 ^ -1 [0]   2 * 0.0625
    (0.000132, 0.000244) : 16 ^ -4 [0]   9 * 1.52588e-05
    (0.01, 0.05)         : 16 ^ -2 [1]   7 * 0.0078125
    (0.01, 0.12)         : 16 ^ -2 [2]   9 * 0.015625
    (0.01, 3.65)         : 16 ^ -1 [3]   9 * 0.5
    (0.0132, 0.0244)     : 16 ^ -3 [3]   8 * 0.00195312
    (0.1, 0.5)           : 16 ^ -1 [0]   8 * 0.0625
    (0.1, 1.2)           : 16 ^ -1 [2]   6 * 0.25
    (0.1, 36.5)          : 16 ^ +0 [3]   6 * 8
    (0.132, 0.244)       : 16 ^ -2 [2]   9 * 0.015625
    (1, 5)               : 16 ^ -1 [3]   9 * 0.5
    (1, 12)              : 16 ^ +0 [1]   7 * 2
    (1, 365)             : 16 ^ +1 [2]   7 * 64
    (1.32, 2.44)         : 16 ^ -1 [2]   6 * 0.25
    (10, 50)             : 16 ^ +0 [3]   7 * 8
    (10, 120)            : 16 ^ +1 [0]   9 * 16
    (10, 3650)           : 16 ^ +2 [1]   9 * 512
    (13.2, 24.4)         : 16 ^ +0 [1]   8 * 2
    (100, 500)           : 16 ^ +1 [2]   8 * 64
    (100, 1200)          : 16 ^ +2 [0]   6 * 256
    (100, 36500)         : 16 ^ +3 [1]   6 * 8192
    (132, 244)           : 16 ^ +1 [0]   9 * 16
    (10000, 50000)       : 16 ^ +3 [1]   7 * 8192
    (10000, 120000)      : 16 ^ +3 [2]   9 * 16384
    (10000, 3650000)     : 16 ^ +4 [3]   8 * 524288
    (13200, 24400)       : 16 ^ +2 [3]   7 * 2048
    === base 16 : (1, 2, 4, 8, 16) max-ticks 20 ==============================
    (-320000, 420000)    : 16 ^ +4 [0]  13 * 65536
    (-3200, 4200)        : 16 ^ +2 [1]  17 * 512
    (-320, 420)          : 16 ^ +1 [2]  13 * 64
    (-32, 42)            : 16 ^ +1 [0]   6 * 16
    (-3.2, 4.2)          : 16 ^ +0 [0]  10 * 1
    (-0.32, 0.42)        : 16 ^ -1 [0]  14 * 0.0625
    (-0.0032, 0.0042)    : 16 ^ -3 [1]  17 * 0.000488281
    (0, 0.004)           : 16 ^ -3 [0]  18 * 0.000244141
    (0, 0.01)            : 16 ^ -3 [2]  12 * 0.000976562
    (0, 0.4)             : 16 ^ -1 [0]   8 * 0.0625
    (0, 1)               : 16 ^ -1 [0]  17 * 0.0625
    (0, 4)               : 16 ^ -1 [2]  17 * 0.25
    (0, 10)              : 16 ^ +0 [0]  11 * 1
    (0, 40)              : 16 ^ +0 [1]  21 * 2
    (0, 100)             : 16 ^ +1 [0]   8 * 16
    (0, 400)             : 16 ^ +1 [1]  14 * 32
    (0, 1000)            : 16 ^ +1 [2]  17 * 64
    (0, 4000)            : 16 ^ +2 [0]  17 * 256
    (0, 10000)           : 16 ^ +2 [1]  21 * 512
    (0, 400000)          : 16 ^ +4 [0]   8 * 65536
    (0, 1000000)         : 16 ^ +4 [0]  17 * 65536
    (0.0001, 0.0005)     : 16 ^ -4 [1]  15 * 3.05176e-05
    (0.0001, 0.0012)     : 16 ^ -3 [0]   6 * 0.000244141
    (0.0001, 0.0365)     : 16 ^ -1 [0]   2 * 0.0625
    (0.000132, 0.000244) : 16 ^ -4 [0]   9 * 1.52588e-05
    (0.01, 0.05)         : 16 ^ -2 [0]  12 * 0.00390625
    (0.01, 0.12)         : 16 ^ -2 [1]  16 * 0.0078125
    (0.01, 3.65)         : 16 ^ -1 [2]  16 * 0.25
    (0.0132, 0.0244)     : 16 ^ -3 [2]  13 * 0.000976562
    (0.1, 0.5)           : 16 ^ -1 [0]   8 * 0.0625
    (0.1, 1.2)           : 16 ^ -1 [0]  20 * 0.0625
    (0.1, 36.5)          : 16 ^ +0 [1]  20 * 2
    (0.132, 0.244)       : 16 ^ -2 [1]  17 * 0.0078125
    (1, 5)               : 16 ^ -1 [2]  17 * 0.25
    (1, 12)              : 16 ^ +0 [0]  12 * 1
    (1, 365)             : 16 ^ +1 [1]  13 * 32
    (1.32, 2.44)         : 16 ^ -1 [0]  20 * 0.0625
    (10, 50)             : 16 ^ +0 [1]  21 * 2
    (10, 120)            : 16 ^ +1 [0]   9 * 16
    (10, 3650)           : 16 ^ +2 [0]  16 * 256
    (13.2, 24.4)         : 16 ^ +0 [0]  13 * 1
    (100, 500)           : 16 ^ +1 [1]  14 * 32
    (100, 1200)          : 16 ^ +2 [0]   6 * 256
    (100, 36500)         : 16 ^ +3 [0]  10 * 4096
    (132, 244)           : 16 ^ +1 [0]   9 * 16
    (10000, 50000)       : 16 ^ +3 [0]  12 * 4096
    (10000, 120000)      : 16 ^ +3 [1]  15 * 8192
    (10000, 3650000)     : 16 ^ +4 [2]  15 * 262144
    (13200, 24400)       : 16 ^ +2 [2]  13 * 1024

    >>> a_5_20_20 = Axis (Base (10), 5000, 20000)
    >>> show (a_5_20_20.major_min, a_5_20_20.major_max, a_5_20_20.major_delta)
    5000 20000 1000
    >>> show (a_5_20_20.ax_min, a_5_20_20.ax_max)
    4000 21000
    >>> show (a_5_20_20.major_range)
    [5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000]
    >>> show (a_5_20_20.medium_ticks, a_5_20_20.medium_delta)
    1 500
    >>> show (a_5_20_20.medium_range)
    [4500, 5500, 6500, 7500, 8500, 9500, 10500, 11500, 12500, 13500, 14500, 15500, 16500, 17500, 18500, 19500, 20500]
    >>> show (a_5_20_20.minor_ticks, a_5_20_20.minor_delta)
    1 250
    >>> show (a_5_20_20.minor_range)
    [4250, 4750, 5250, 5750, 6250, 6750, 7250, 7750, 8250, 8750, 9250, 9750, 10250, 10750, 11250, 11750, 12250, 12750, 13250, 13750, 14250, 14750, 15250, 15750, 16250, 16750, 17250, 17750, 18250, 18750, 19250, 19750, 20250, 20750]

    >>> a_5_20_8  = Axis (Base (10), 5000, 20000, max_major_ticks = 8)
    >>> show (a_5_20_8.major_min, a_5_20_8.major_max, a_5_20_8.major_delta)
    4000 20000 2000
    >>> show (a_5_20_8.ax_min, a_5_20_8.ax_max)
    3000 22000
    >>> show (a_5_20_8.major_range)
    [4000, 6000, 8000, 10000, 12000, 14000, 16000, 18000, 20000]
    >>> show (a_5_20_8.medium_ticks, a_5_20_8.medium_delta)
    1 1000
    >>> show (a_5_20_8.medium_range)
    [5000, 7000, 9000, 11000, 13000, 15000, 17000, 19000, 21000]
    >>> show (a_5_20_8.minor_ticks, a_5_20_8.minor_delta)
    4 200
    >>> show (a_5_20_8.minor_range)
    [3200, 3400, 3600, 3800, 4200, 4400, 4600, 4800, 5200, 5400, 5600, 5800, 6200, 6400, 6600, 6800, 7200, 7400, 7600, 7800, 8200, 8400, 8600, 8800, 9200, 9400, 9600, 9800, 10200, 10400, 10600, 10800, 11200, 11400, 11600, 11800, 12200, 12400, 12600, 12800, 13200, 13400, 13600, 13800, 14200, 14400, 14600, 14800, 15200, 15400, 15600, 15800, 16200, 16400, 16600, 16800, 17200, 17400, 17600, 17800, 18200, 18400, 18600, 18800, 19200, 19400, 19600, 19800, 20200, 20400, 20600, 20800, 21200, 21400, 21600, 21800]

    >>> a_5_20_6  = Axis (Base (10), 5000, 20000, max_major_ticks = 6)
    >>> show (a_5_20_6.major_min, a_5_20_6.major_max, a_5_20_6.major_delta)
    5000 20000 2500
    >>> show (a_5_20_6.ax_min, a_5_20_6.ax_max)
    2500 22500
    >>> show (a_5_20_6.major_range)
    [5000, 7500, 10000, 12500, 15000, 17500, 20000]
    >>> show (a_5_20_6.medium_ticks, a_5_20_6.medium_delta)
    1 1250
    >>> show (a_5_20_6.medium_range)
    [3750, 6250, 8750, 11250, 13750, 16250, 18750, 21250]
    >>> show (a_5_20_6.minor_ticks, a_5_20_6.minor_delta)
    4 250
    >>> show (a_5_20_6.minor_range)
    [2750, 3000, 3250, 3500, 4000, 4250, 4500, 4750, 5250, 5500, 5750, 6000, 6500, 6750, 7000, 7250, 7750, 8000, 8250, 8500, 9000, 9250, 9500, 9750, 10250, 10500, 10750, 11000, 11500, 11750, 12000, 12250, 12750, 13000, 13250, 13500, 14000, 14250, 14500, 14750, 15250, 15500, 15750, 16000, 16500, 16750, 17000, 17250, 17750, 18000, 18250, 18500, 19000, 19250, 19500, 19750, 20250, 20500, 20750, 21000, 21500, 21750, 22000, 22250]

    >>> a_5_20_6_0_1  = Axis (Base (10), 5000, 20000, max_major_ticks = 6, margin = 0.1)
    >>> show (a_5_20_6_0_1.major_min, a_5_20_6_0_1.major_max, a_5_20_6_0_1.major_delta)
    5000 20000 2500
    >>> show (a_5_20_6_0_1.ax_min, a_5_20_6_0_1.ax_max)
    4750 20250
    >>> show (a_5_20_6_0_1.major_range)
    [5000, 7500, 10000, 12500, 15000, 17500, 20000]
    >>> show (a_5_20_6_0_1.medium_ticks, a_5_20_6_0_1.medium_delta)
    1 1250
    >>> show (a_5_20_6_0_1.medium_range)
    [6250, 8750, 11250, 13750, 16250, 18750]
    >>> show (a_5_20_6_0_1.minor_ticks, a_5_20_6_0_1.minor_delta)
    4 250
    >>> show (a_5_20_6_0_1.minor_range)
    [5250, 5500, 5750, 6000, 6500, 6750, 7000, 7250, 7750, 8000, 8250, 8500, 9000, 9250, 9500, 9750, 10250, 10500, 10750, 11000, 11500, 11750, 12000, 12250, 12750, 13000, 13250, 13500, 14000, 14250, 14500, 14750, 15250, 15500, 15750, 16000, 16500, 16750, 17000, 17250, 17750, 18000, 18250, 18500, 19000, 19250, 19500, 19750]

    >>> a_5_20_2  = Axis (Base (10), 5000, 20000, max_major_ticks = 2, margin = 0.1)
    >>> show (a_5_20_2.major_min, a_5_20_2.major_max, a_5_20_2.major_delta)
    0 20000 10000
    >>> show (a_5_20_2.ax_min, a_5_20_2.ax_max)
    0 21000
    >>> show (a_5_20_2.major_range)
    [0, 10000, 20000]
    >>> show (a_5_20_2.medium_ticks, a_5_20_2.medium_delta)
    3 2500
    >>> show (a_5_20_2.medium_range)
    [2500, 5000, 7500, 12500, 15000, 17500]
    >>> show (a_5_20_2.minor_ticks, a_5_20_2.minor_delta)
    4 500
    >>> show (a_5_20_2.minor_range)
    [500, 1000, 1500, 2000, 3000, 3500, 4000, 4500, 5500, 6000, 6500, 7000, 8000, 8500, 9000, 9500, 10500, 11000, 11500, 12000, 13000, 13500, 14000, 14500, 15500, 16000, 16500, 17000, 18000, 18500, 19000, 19500, 20500]

    >>> a_5_20_2_0  = Axis (Base (10), 5000, 20000, max_major_ticks = 2, max_ticks = 15, margin = 0)
    >>> show (a_5_20_2_0.major_min, a_5_20_2_0.major_max, a_5_20_2_0.major_delta)
    0 20000 10000
    >>> show (a_5_20_2_0.ax_min, a_5_20_2_0.ax_max)
    0 20000
    >>> show (a_5_20_2_0.major_range)
    [0, 10000, 20000]
    >>> show (a_5_20_2_0.medium_ticks, a_5_20_2_0.medium_delta)
    1 5000
    >>> show (a_5_20_2_0.medium_range)
    [5000, 15000]
    >>> show (a_5_20_2_0.minor_ticks, a_5_20_2_0.minor_delta)
    1 2500
    >>> show (a_5_20_2_0.minor_range)
    [2500, 7500, 12500, 17500]

    >>> a_1_5 = Axis (Base_Integral (10), 1, 5)
    >>> show (a_1_5.major_min, a_1_5.major_max, a_1_5.major_delta)
    1 5 1
    >>> show (a_1_5.ax_min, a_1_5.ax_max)
    0 6
    >>> show (a_1_5.major_range)
    [1, 2, 3, 4, 5]
    >>> show (a_1_5.medium_ticks, a_1_5.medium_delta)
    0 0
    >>> show (a_1_5.medium_range)
    []
    >>> show (a_1_5.minor_ticks, a_1_5.minor_delta)
    0 0
    >>> show (a_1_5.minor_range)
    []

    >>> a_1_5_m = Axis (Base (10), 1, 5, medium_ticks = 3)
    >>> show (a_1_5_m.major_min, a_1_5_m.major_max, a_1_5_m.major_delta)
    1 5 1
    >>> show (a_1_5_m.ax_min, a_1_5_m.ax_max)
    0 6
    >>> show (a_1_5_m.major_range)
    [1, 2, 3, 4, 5]
    >>> show (a_1_5_m.medium_ticks, a_1_5_m.medium_delta)
    3 0.25
    >>> show (a_1_5_m.medium_range)
    [0.25, 0.5, 0.75, 1.25, 1.5, 1.75, 2.25, 2.5, 2.75, 3.25, 3.5, 3.75, 4.25, 4.5, 4.75, 5.25, 5.5, 5.75]
    >>> show (a_1_5_m.minor_ticks, a_1_5_m.minor_delta)
    4 0.05
    >>> show (a_1_5_m.minor_range)
    [0.05, 0.1, 0.15, 0.2, 0.3, 0.35, 0.4, 0.45, 0.55, 0.6, 0.65, 0.7, 0.8, 0.85, 0.9, 0.95, 1.05, 1.1, 1.15, 1.2, 1.3, 1.35, 1.4, 1.45, 1.55, 1.6, 1.65, 1.7, 1.8, 1.85, 1.9, 1.95, 2.05, 2.1, 2.15, 2.2, 2.3, 2.35, 2.4, 2.45, 2.55, 2.6, 2.65, 2.7, 2.8, 2.85, 2.9, 2.95, 3.05, 3.1, 3.15, 3.2, 3.3, 3.35, 3.4, 3.45, 3.55, 3.6, 3.65, 3.7, 3.8, 3.85, 3.9, 3.95, 4.05, 4.1, 4.15, 4.2, 4.3, 4.35, 4.4, 4.45, 4.55, 4.6, 4.65, 4.7, 4.8, 4.85, 4.9, 4.95, 5.05, 5.1, 5.15, 5.2, 5.3, 5.35, 5.4, 5.45, 5.55, 5.6, 5.65, 5.7, 5.8, 5.85, 5.9, 5.95]

    >>> a_1_5_f = Axis (Base (10), 1, 5)
    >>> show (a_1_5_f.major_min, a_1_5_f.major_max, a_1_5_f.major_delta)
    1 5 1
    >>> show (a_1_5_f.ax_min, a_1_5_f.ax_max)
    0 6
    >>> show (a_1_5_f.major_range)
    [1, 2, 3, 4, 5]
    >>> show (a_1_5_f.medium_ticks, a_1_5_f.medium_delta)
    1 0.5
    >>> show (a_1_5_f.medium_range)
    [0.5, 1.5, 2.5, 3.5, 4.5, 5.5]
    >>> show (a_1_5_f.minor_ticks, a_1_5_f.minor_delta)
    4 0.1
    >>> show (a_1_5_f.minor_range)
    [0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9, 1.1, 1.2, 1.3, 1.4, 1.6, 1.7, 1.8, 1.9, 2.1, 2.2, 2.3, 2.4, 2.6, 2.7, 2.8, 2.9, 3.1, 3.2, 3.3, 3.4, 3.6, 3.7, 3.8, 3.9, 4.1, 4.2, 4.3, 4.4, 4.6, 4.7, 4.8, 4.9, 5.1, 5.2, 5.3, 5.4, 5.6, 5.7, 5.8, 5.9]

    >>> m_0_42 = Axis (base_month, 0, 42, margin = 0)
    >>> print (m_0_42)
    Axis (Base_Integral (12, (3, 6)), 0, 42, 0, 42, 0, 20, 100)
    >>> print (m_0_42.scaled)
    12 : (1, 3, 6, 12)
    >>> show (m_0_42.major_min, m_0_42.major_max, m_0_42.major_delta)
    0 42 3
    >>> show (m_0_42.major_range)
    [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42]
    >>> show (m_0_42.medium_range)
    [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41]
    >>> show (m_0_42.minor_range)
    []

    >>> m_0_47 = Axis (base_month, 0, 47, margin = 0)
    >>> print (m_0_47)
    Axis (Base_Integral (12, (3, 6)), 0, 47, 0, 48, 0, 20, 100)
    >>> print (m_0_47.scaled)
    12 : (1, 3, 6, 12)
    >>> show (m_0_47.major_min, m_0_47.major_max, m_0_47.major_delta)
    0 48 3

    >>> m_1_42 = Axis (base_month, 1, 42, margin = 0)
    >>> print (m_1_42)
    Axis (Base_Integral (12, (3, 6)), 1, 42, 0, 42, 0, 20, 100)
    >>> show (m_1_42.major_min, m_1_42.major_max, m_1_42.major_delta)
    0 42 3
    >>> show (m_1_42.ax_min, m_1_42.ax_max)
    0 42
    >>> show (m_1_42.major_range)
    [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42]
    >>> show (m_1_42.medium_range)
    [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41]
    >>> show (m_1_42.minor_range)
    []

    >>> m_1_42_m = Axis (base_month, 1, 42, margin = 0, max_major_ticks=12)
    >>> show (m_1_42_m.major_min, m_1_42_m.major_max, m_1_42_m.major_delta)
    0 42 6
    >>> show (m_1_42_m.ax_min, m_1_42_m.ax_max)
    0 42
    >>> show (m_1_42_m.major_range)
    [0, 6, 12, 18, 24, 30, 36, 42]
    >>> show (m_1_42_m.medium_range)
    [3, 9, 15, 21, 27, 33, 39]
    >>> show (m_1_42_m.minor_range)
    [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41]

    >>> m_1_42_m6 = Axis (base_month, 1, 42, margin = 0, max_major_ticks=6)
    >>> show (m_1_42_m6.major_min, m_1_42_m6.major_max, m_1_42_m6.major_delta)
    0 48 12
    >>> show (m_1_42_m6.ax_min, m_1_42_m6.ax_max)
    0 48
    >>> show (m_1_42_m6.major_range)
    [0, 12, 24, 36, 48]
    >>> show (m_1_42_m6.medium_ticks, m_1_42_m6.medium_delta)
    3 3
    >>> show (m_1_42_m6.medium_range)
    [3, 6, 9, 15, 18, 21, 27, 30, 33, 39, 42, 45]
    >>> show (m_1_42_m6.minor_range)
    [1, 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41, 43, 44, 46, 47]

    >>> y_0418_0442 = Axis (base_10, 0.418, 0.442, max_major_ticks = 4)
    >>> print (y_0418_0442.scaled)
    10 ^ -3 : (0.001, 0.002, 0.005, 0.01)
    >>> show (y_0418_0442.major_min, y_0418_0442.major_max, y_0418_0442.data_length, y_0418_0442.major_delta)
    0.41 0.45 0.024 0.01
    >>> show (y_0418_0442.ax_min, y_0418_0442.ax_max)
    0.408 0.452
    >>> show (y_0418_0442.major_range)
    [0.41, 0.42, 0.43, 0.44, 0.45]
    >>> show (y_0418_0442.medium_range)
    [0.4125, 0.415, 0.4175, 0.4225, 0.425, 0.4275, 0.4325, 0.435, 0.4375, 0.4425, 0.445, 0.4475]
    >>> show (y_0418_0442.minor_range)
    [0.4085, 0.409, 0.4095, 0.4105, 0.411, 0.4115, 0.412, 0.413, 0.4135, 0.414, 0.4145, 0.4155, 0.416, 0.4165, 0.417, 0.418, 0.4185, 0.419, 0.4195, 0.4205, 0.421, 0.4215, 0.422, 0.423, 0.4235, 0.424, 0.4245, 0.4255, 0.426, 0.4265, 0.427, 0.428, 0.4285, 0.429, 0.4295, 0.4305, 0.431, 0.4315, 0.432, 0.433, 0.4335, 0.434, 0.4345, 0.4355, 0.436, 0.4365, 0.437, 0.438, 0.4385, 0.439, 0.4395, 0.4405, 0.441, 0.4415, 0.442, 0.443, 0.4435, 0.444, 0.4445, 0.4455, 0.446, 0.4465, 0.447, 0.448, 0.4485, 0.449, 0.4495, 0.4505, 0.451, 0.4515]

    >>> y_0278_0281 = Axis (base_10, 0.278, 0.281, max_major_ticks = 4)
    >>> show (y_0278_0281.major_min, y_0278_0281.major_max, y_0278_0281.data_length, y_0278_0281.major_delta)
    0.278 0.281 0.003 0.001
    >>> show (y_0278_0281.major_range)
    [0.277, 0.278, 0.279, 0.28, 0.281, 0.282]
    >>> show (y_0278_0281.medium_range)
    [0.27725, 0.2775, 0.27775, 0.27825, 0.2785, 0.27875, 0.27925, 0.2795, 0.27975, 0.28025, 0.2805, 0.28075, 0.28125, 0.2815, 0.28175]
    >>> show (y_0278_0281.minor_range)
    [0.27705, 0.2771, 0.27715, 0.2772, 0.2773, 0.27735, 0.2774, 0.27745, 0.27755, 0.2776, 0.27765, 0.2777, 0.2778, 0.27785, 0.2779, 0.27795, 0.27805, 0.2781, 0.27815, 0.2782, 0.2783, 0.27835, 0.2784, 0.27845, 0.27855, 0.2786, 0.27865, 0.2787, 0.2788, 0.27885, 0.2789, 0.27895, 0.27905, 0.2791, 0.27915, 0.2792, 0.2793, 0.27935, 0.2794, 0.27945, 0.27955, 0.2796, 0.27965, 0.2797, 0.2798, 0.27985, 0.2799, 0.27995, 0.28005, 0.2801, 0.28015, 0.2802, 0.2803, 0.28035, 0.2804, 0.28045, 0.28055, 0.2806, 0.28065, 0.2807, 0.2808, 0.28085, 0.2809, 0.28095, 0.28105, 0.2811, 0.28115, 0.2812, 0.2813, 0.28135, 0.2814, 0.28145, 0.28155, 0.2816, 0.28165, 0.2817, 0.2818, 0.28185, 0.2819, 0.28195]

    >>> y_0278_0281_m = Axis (base_10, 0.278, 0.281, major_delta = 0.002, max_major_ticks = 4, max_ticks = 20)
    >>> print (y_0278_0281_m.scaled)
    10 ^ -4 : (0.0001, 0.0002, 0.0005, 0.001)
    >>> show (y_0278_0281_m.major_min, y_0278_0281_m.major_max, y_0278_0281_m.data_length, y_0278_0281_m.major_delta)
    0.278 0.282 0.003 0.002
    >>> show (y_0278_0281_m.major_range)
    [0.276, 0.278, 0.28, 0.282]
    >>> show (y_0278_0281_m.medium_range)
    [0.277, 0.279, 0.281]
    >>> show (y_0278_0281_m.minor_range)
    [0.2765, 0.2775, 0.2785, 0.2795, 0.2805, 0.2815, 0.2825]

    >>> y_0278_0281_m3 = Axis (base_10, 0.278, 0.281, major_delta = 0.003, max_major_ticks = 4, max_ticks = 10)
    >>> show (y_0278_0281_m3.major_min, y_0278_0281_m3.major_max, y_0278_0281_m3.data_length, y_0278_0281_m3.major_delta)
    0.276 0.282 0.003 0.003
    >>> show (y_0278_0281_m3.ax_min, y_0278_0281_m3.ax_max)
    0.275 0.284
    >>> show (y_0278_0281_m3.major_range)
    [0.276, 0.279, 0.282]
    >>> show (y_0278_0281_m3.medium_range)
    [0.2775, 0.2805, 0.2835]
    >>> show (y_0278_0281_m3.minor_range)
    [0.27525, 0.27675, 0.27825, 0.27975, 0.28125, 0.28275]

    >>> y_0278_0281_m10 = Axis (base_10, 0.278, 0.281, major_delta = 0.010, max_major_ticks = 4, minor_ticks = 4)
    >>> show (y_0278_0281_m10.major_min, y_0278_0281_m10.major_max, y_0278_0281_m10.data_length, y_0278_0281_m10.major_delta)
    0.27 0.29 0.003 0.01
    >>> show (y_0278_0281_m10.ax_min, y_0278_0281_m10.ax_max)
    0.268 0.291
    >>> show (y_0278_0281_m10.major_range)
    [0.27, 0.28, 0.29]
    >>> show (y_0278_0281_m10.medium_range)
    [0.2725, 0.275, 0.2775, 0.2825, 0.285, 0.2875]
    >>> show (y_0278_0281_m10.minor_range)
    [0.2685, 0.269, 0.2695, 0.2705, 0.271, 0.2715, 0.272, 0.273, 0.2735, 0.274, 0.2745, 0.2755, 0.276, 0.2765, 0.277, 0.278, 0.2785, 0.279, 0.2795, 0.2805, 0.281, 0.2815, 0.282, 0.283, 0.2835, 0.284, 0.2845, 0.2855, 0.286, 0.2865, 0.287, 0.288, 0.2885, 0.289, 0.2895, 0.2905]

    >>> y_098_102 = Axis (base_10, 0.98, 1.02, margin = 0.25, max_major_ticks = 4)
    >>> print (y_098_102.scaled)
    10 ^ -1 : (0.1, 0.2, 0.5, 1)
    >>> show (y_098_102.major_min, y_098_102.major_max, y_098_102.data_length, y_098_102.major_delta)
    0.9 1.1 0.04 0.1
    >>> show (y_098_102.ax_min, y_098_102.ax_max)
    0.9 1.1
    >>> show (y_098_102.major_range)
    [0.9, 1, 1.1]
    >>> show (y_098_102.medium_range)
    [0.95, 1.05]
    >>> show (y_098_102.minor_range)
    [0.91, 0.92, 0.93, 0.94, 0.96, 0.97, 0.98, 0.99, 1.01, 1.02, 1.03, 1.04, 1.06, 1.07, 1.08, 1.09]

"""

### __END__ TFL.__test__.Ticker
